@use "sass:math";
@use "sass:map";
@use "sass:color";

@use "breakpoints";
@use "grid";

$container-padding-inline: 1rem;

$section-padding-block: 4rem;

$_container-margins: (
  phone-landscape: auto,
  tablet-portrait: auto,
  tablet-landscape: auto,
  desktop-small: auto,
  desktop-medium: auto,
  desktop-large: auto,
);

$_container-max-widths: (
  phone-landscape: 460px,
  tablet-portrait: 720px,
  tablet-landscape: 920px,
  desktop-small: 1120px,
  desktop-medium: 1320px,
  desktop-large: 1620px,
);

@function container-margin-inline($breakpoint) {
  @return map.get($_container-margins, $breakpoint);
}

@function container-max-width($breakpoint) {
  @return map.get($_container-max-widths, $breakpoint);
}

.container {
  padding: 0 $container-padding-inline;
  margin: 0 auto;

  @each $breakpoint in breakpoints.$breakpoints {
    @include breakpoints.ge($breakpoint) {
      margin-inline: container-margin-inline($breakpoint);
      max-width: container-max-width($breakpoint);
    }
  }

  @mixin fluid-onesided($multiplier: 1) {
    @each $breakpoint in breakpoints.$breakpoints {
      @include breakpoints.ge($breakpoint) {
        max-width: calc(#{container-max-width($breakpoint)} + (((100% - #{container-max-width($breakpoint)}) / 2) * #{$multiplier}));
      }
    }
  }

  &.no-padding {
    padding-inline: 0;
  }

  &.fluid-left,
  &.flush-left {
    margin-inline-start: 0;

    @include fluid-onesided;
  }

  &.fluid-right,
  &.flush-right {
    margin-inline-end: 0;

    @include fluid-onesided;
  }

  &.flush-left {
    padding-inline-start: 0;

    .flush-right {
      @include fluid-onesided(0);
    }
  }

  &.flush-right {
    padding-inline-end: 0;

    .flush-left {
      @include fluid-onesided(0);
    }
  }
}

.section {
  padding-block: $section-padding-block;
}
